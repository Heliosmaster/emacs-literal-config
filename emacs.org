#+TITLE: Making Emacs Work For Me
#+AUTHOR: Joost Diepenmaat
#+EMAIL: joost@zeekat.nl

* Configuring Emacs: A Yak Shaving Diary

  This is my âˆžth attempt at creating a readable and maintainable Emacs
  configuration. I'm hopeful that using Org-Babel and a literate
  programming style will help tame the bit-rot and spaghettification.

* Installation

  This configuration is intended to be installable from scratch. It
  uses [[https://github.com/cask/cask][Cask]] to specify the package dependencies. [[https://github.com/rdallasgray/pallet][Pallet]] is installed
  to sync actual installed packages with the dependency spec.

** Installation procedure

  - Install GNU Emacs 24 or higher
  - Install Cask from https://github.com/cask/cask
  - Clone this repository into ~$HOME/.emacs.d~
  - Run ~cask install~ in ~$HOME/.emacs.d~
  - Start Emacs

** Issues installing

  - Emacs failing to load pallet can indicate that ~cask~ is
    attempting to install packages using a different Emacs version
    than the one you're starting. Check your ~$PATH~ and/or aliases.

* Graphics and looks

** Font

   I like [[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]], but it doesn't support a wide range of Unicode
   characters, so I fall back on [[http://dejavu-fonts.org/wiki/Main_Page][DejaVu Sans]] for those.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil
			 :family "Inconsolata"
			 :height 140
			 :weight 'normal
			 :width 'normal)

     (when (functionp 'set-fontset-font)
       (set-fontset-font "fontset-default"
			 'unicode
			 (font-spec :family "DejaVu Sans"
				    :width 'normal
				    :size 13.0
				    :weight 'normal)))

   #+end_src

** Reduce clutter

   Remove the toolbar. It's ugly and I never use it. Also remove the
   scroll bars; below, I set up the fringe to show my position in a
   buffer.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (when (window-system)
       (tool-bar-mode -1)
       (scroll-bar-mode -1))
   #+end_src

** Fringe decorations

   [[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
   buffer. Emacs lets you customize it of course.

   Here I set up git diffs and buffer position in the fringe.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (require 'git-gutter-fringe)
     (global-git-gutter-mode +1)

     (setq-default indicate-buffer-boundaries 'left)
     (setq-default indicate-empty-lines +1)

   #+END_SRC

** Mode line

   The default Mode Line is confusing and boring. Using
   sml-smart-mode-line it's a bit nicer to look at and more
   informative.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (require 'smart-mode-line)
     (sml/setup)
   #+END_SRC

** Scrolling behavior

   Emacs's default scrolling behavior, like a lot of the default
   Emacs experience, is pretty idiosyncratic. The following snippet
   makes for a smoother scrolling behavior when using keyboard
   navigation.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq redisplay-dont-pause t
	   scroll-margin 1
	   scroll-step 1
	   scroll-conservatively 10000
	   scroll-preserve-screen-position 1)
   #+END_SRC

   I've not yet found a good smooth way to deal with scroll wheel /
   track pad input.

* Start up

  Start with the scratch buffer; no start up screen.

  #+NAME: startup
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen +1)
  #+END_SRC

* Formatting and white-space

  #+name: formatting
  #+begin_src emacs-lisp
    (defun my/clean-buffer-formatting
      ()
      "Indent and clean up the buffer"
      (interactive)
      (indent-region (point-min) (point-max))
      (whitespace-cleanup))

    (global-set-key "\C-cn" 'my/clean-buffer-formatting)

    (defun my/general-formatting-hooks
      ()
      (setq show-trailing-whitespace 't))

    (dolist (mode-hook (my/normal-mode-hooks))
      (add-hook mode-hook 'my/general-formatting-hooks))
  #+end_src

** Text (non-code) formatting

   For writing text, I prefer Emacs to do line wrapping for me. Also,
   superfluous white-space should be shown.

   #+name: formatting
   #+begin_src emacs-lisp
     (defun my/text-formatting-hooks
       ()
       (my/turn-on 'auto-fill)) ; turn on automatic hard line wraps

     (add-hook 'text-mode-hook
	       'my/text-formatting-hooks)
   #+end_src

* Programming
** Pair programming

   Normally, I think line numbers in code editors just take up space,
   but they can be useful when pair programming; calling out a line
   number is probably more efficient than pointing at the screen.

   I wrapped this in a global minor mode so turning that stuff on and
   off is easy.

   #+name: programming-setup
   #+begin_src emacs-lisp
     (define-minor-mode my/pair-programming-mode
       "Toggle visualizations for pair programming.

     Interactively with no argument, this command toggles the mode.  A
     positive prefix argument enables the mode, any other prefix
     argument disables it.  From Lisp, argument omitted or nil enables
     the mode, `toggle' toggles the state."
       ;; The initial value.
       nil
       ;; The indicator for the mode line.
       " Pairing"
       ;; The minor mode bindings.
       '()
       :group 'my/pairing
       (linum-mode (if my/pair-programming-mode 1 -1)))

     (define-global-minor-mode my/global-pair-programming-mode
       my/pair-programming-mode
       (lambda () (my/pair-programming-mode 1)))

     (global-set-key "\C-cp" 'my/global-pair-programming-mode)
   #+end_src

** Lisps

   For lisp code, I want ParEdit plus general highlighting etc.

   #+name: programming-setup
   #+begin_src emacs-lisp
    (setq my/lisps
	  '(emacs-lisp lisp clojure))

    (defun my/general-lisp-hooks
      ()
      (my/turn-on 'paredit
		  'rainbow-delimiters
		  'highlight-parentheses))

    (dolist (mode (mapcar 'my/->mode-hook my/lisps))
      (add-hook mode
		'my/general-lisp-hooks))
   #+end_src emacs-lisp

** Clojure

   I'm using [[https://github.com/clojure-emacs/cider/commits/master][CIDER]] (formerly ~nrepl.el~) for clojure source/repl
   interaction. Also, I want ~clojure-test-mode~ available in source
   buffers.

   #+NAME: programming-setup
   #+BEGIN_SRC emacs-lisp
     (defun my/clojure-mode-hooks
       ()
       (my/turn-on 'clojure-test 'cider))

     (add-hook 'clojure-mode-hook
	       'my/clojure-mode-hooks)

     ;; note that currently cider-mode gets run for every clojure
     ;; buffer. Maybe I should set it up so that only ~cider~ or
     ;; ~cider-jack-in~ are defined in clojure mode instead.
     (defun my/cider-mode-hooks
       ()
       "Clojure specific setup code that should only be run when we
       have a CIDER REPL connection"
       (cider-turn-on-eldoc-mode))

     (add-hook 'cider-mode-hook
	       'my/cider-mode-hooks)
   #+END_SRC

   I treat the REPL mode specially, since certain hooks that work in
   ~clojure-mode~ won't make sense or break functionality in
   ~cider-repl-mode~.

   #+NAME: programming-setup
   #+BEGIN_SRC emacs-lisp
     (defun my/cider-repl-mode-hooks
       ()
       (my/turn-on 'paredit
		   'rainbow-delimiters
		   'highlight-parentheses))

     (add-hook 'cider-repl-mode-hook
	       'my/cider-repl-mode-hooks)

   #+END_SRC

** Ruby
*** Rake
    Tell Emacs rake files are Ruby files.

    #+name: programming-setup
    #+BEGIN_SRC emacs-lisp

      (dolist (exp '("Rakefile\\'" "\\.rake\\'"))
	(add-to-list 'auto-mode-alist
		     (cons exp 'ruby-mode)))

    #+END_SRC
* Global key bindings

  As far as reasonable, I try to keep my custom key bindings within
  the "official" restraints. Specifically, I want my global key
  bindings to start with "C-c [lower case letter]"~.

  #+name: global-keys
  #+begin_src emacs-lisp
    (global-set-key "\C-cg" 'magit-status)
  #+end_src

* Global navigation

  I like ~ido~ and ~smex~ for narrowing down files, commands, buffers
  etc.

  #+name: global-navigation
  #+begin_src emacs-lisp
    (ido-mode +1)
    (global-set-key "\M-x" 'smex)
    (ido-yes-or-no-mode +1)
  #+end_src

* Org Mode

** Global keys

   Short key bindings for capturing notes/links and switching to agenda.

   #+name: org-config
   #+begin_src emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
   #+end_src

** Tasks / TODOs

   #+name: org-config
   #+begin_src emacs-lisp
     (setq org-todo-keywords
	   '((sequence "TODO(t)" "PENDING(p)" "MEETING(m)" "|" "DONE(d)" "CANCELED(c)")))

     (defun my-org-autodone
       (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
	 (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

     (add-hook 'org-after-todo-statistics-hook 'my-org-autodone)
   #+end_src

** Org-Babel

   Use syntax highlighting ("fontification") in org-mode source
   blocks, and use a slightly darker background to visually separate
   the source block from its surroundings.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively 't)
     (set-face-attribute 'org-block-background nil
			 :background "#f0f0e8")
   #+END_SRC

* Configuration file layout

  Here I define the emacs.el file that gets generated by the code in
  this org file.

  #+begin_src emacs-lisp :tangle yes :noweb no-export :exports code
    ;;;; Do not modify this file by hand.  It was automatically generated
    ;;;; from `emacs.org` in the same directory. See that file for more
    ;;;; information.

    <<environment>>
    <<tools>>
    <<look-and-feel>>
    <<formatting>>
    <<programming-setup>>
    <<global-keys>>
    <<global-navigation>>
    <<org-config>>
    <<startup>>
  #+end_src

* Tools

  This section defines some functionality used elsewhere in this
  configuration.

** Hooks and modes

   #+name: tools
   #+begin_src emacs-lisp
     (defun my/->string
       (str)
       (cond
	((stringp str) str)
	((symbolp str) (symbol-name str))))

     (defun my/->mode-hook
       (name)
       "Turn mode name into hook symbol"
       (intern (replace-regexp-in-string "\\(-mode\\)?\\(-hook\\)?$"
					 "-mode-hook"
					 (my/->string name))))

     (defun my/->mode
       (name)
       "Turn mode name into mode symbol"
       (intern (replace-regexp-in-string "\\(-mode\\)?$"
					 "-mode"
					 (my/->string name))))

     (defun my/turn-on
       (&rest mode-list)
       "Turn on the given (minor) modes."
       (dolist (m mode-list)
	 (funcall (my/->mode m) +1)))

     (defvar my/normal-base-modes
       (mapcar 'my/->mode '(text prog))
       "The list of modes that are considered base modes for
       programming and text editing. In an ideal world, this should
       just be text-mode and prog-mode, however, some modes that
       should derive from prog-mode derive from fundamental-mode
       instead. They are added here.")

     (defun my/normal-mode-hooks
       ()
       "Returns the mode-hooks for `my/normal-base-modes`"
       (mapcar 'my/->mode-hook my/normal-base-modes))

    #+end_src

* Environment

  For some reason on OSX I can't get Emacs and my shell to
  automatically agree on what PATH is. For now, I hard-code PATH in my
  Emacs configuration.

  #+name: environment
  #+begin_src emacs-lisp
    (add-to-list 'exec-path "/usr/local/bin")
    (add-to-list 'exec-path "/bin")
    (add-to-list 'exec-path "/usr/texbin")
    (add-to-list 'exec-path "~/bin")
    (setenv "PATH" "/usr/local/bin:/usr/bin:/usr/texbin:~/bin:/bin")
  #+end_src
