#+TITLE: Emacs Configuration
#+AUTHOR: Joost Diepenmaat
#+EMAIL: joost@zeekat.nl

* Installation

  This configuration is intended to be installable from scratch.  It
  uses ~Cask~ to specify the package dependencies.  ~Pallet~ is
  installed to sync actual installed packages with the dependency
  spec.

** Installation procedure

  - Install GNU Emacs 24 or higher
  - Install Cask: See https://github.com/cask/cask
  - Clone this repository into ~\~/.emacs.d~
  - Run ~cask install~
  - Start emacs

** Issues installing

  - Emacs failing to load pallet can indicate that ~cask~ is
    attempting to install packages using a different Emacs version
    than the one you're starting. Check your ~$PATH~ and/or aliases.
* Graphics and looks
** Font
   I like [[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]], but it doesn't support a wide range of Unicode
   characters, so I fall back on [[http://dejavu-fonts.org/wiki/Main_Page][DejaVu Sans]] for those.

   #+name: looks
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil
			 :family "Inconsolata"
			 :height 140
			 :weight 'normal
			 :width 'normal)

     (when (functionp 'set-fontset-font)
       (set-fontset-font "fontset-default"
			 'unicode
			 (font-spec :family "DejaVu Sans"
				    :width 'normal
				    :size 13.0
				    :weight 'normal)))

   #+end_src
** Color theme

   I'm using a custom color theme based on the default theme, with a
   little less saturation.

   #+name: looks
   #+begin_src emacs-lisp
     ;(load-theme 'joost)
   #+end_src

** Reduce clutter

   #+name: looks
   #+begin_src emacs-lisp
     (when (window-system)
       (tool-bar-mode -1)
       (scroll-bar-mode -1))
   #+end_src
* Formatting and whitespace

  #+name: formatting
  #+begin_src emacs-lisp
    (defun my/clean-buffer-formatting
      ()
      "Indent and clean up the buffer"
      (interactive)
      (indent-region (point-min) (point-max))
      (whitespace-cleanup))

    (global-set-key "\C-cn" 'my/clean-buffer-formatting)

    (defun my/general-formatting-hooks
      ()
      (setq show-trailing-whitespace 't))

    (dolist (mode-hook (my/normal-mode-hooks))
      (add-hook mode-hook 'my/general-formatting-hooks))

  #+end_src

** Text (non-code) formatting

   For writing text, I prefer Emacs to do line wrapping for me. Also,
   superfluous whitespace should be shown.

   #+name: formatting
   #+begin_src emacs-lisp
     (defun my/text-formatting-hooks
       ()
       (my/turn-on 'auto-fill)) ; turn on automatic hard line wraps

     (add-hook 'text-mode-hook
	       'my/text-formatting-hooks)
   #+end_src

* Lisp code
** General Lisps
  For general lisp code, I want ParEdit plus general highlighting etc.

  #+name: lisp-setup
  #+begin_src emacs-lisp
    (setq my/lisps
	  '(emacs-lisp lisp clojure))

    (defun my/general-lisp-hooks
      ()
      (my/turn-on 'paredit
		  'rainbow-delimiters
		  'highlight-parentheses))

    (dolist (mode (mapcar 'my/->mode-hook my/lisps))
      (add-hook mode
		'my/general-lisp-hooks))
  #+end_src emacs-lisp

** Clojure

   I'm using ~CIDER~ (formerly ~nrepl.el~) for clojure source/repl
   interaction. Also, I want ~clojure-test-mode~ available in source
   buffers.

   #+NAME: lisp-setup
   #+BEGIN_SRC emacs-lisp
     (defun my/clojure-mode-hooks
       ()
       (my/turn-on 'clojure-test 'cider))

     (add-hook 'clojure-mode-hook
	       'my/clojure-mode-hooks)

     ;; note that currently cider-mode gets run for every clojure
     ;; buffer. Maybe I should set it up so that only ~cider~ or
     ;; ~cider-jack-in~ are defined in clojure mode instead.
     (defun my/cider-mode-hooks
       ()
       "Clojure specific setup code that should only be run when we
       have a CIDER REPL connection"
       (cider-turn-on-eldoc-mode))

     (add-hook 'cider-mode-hook
	       'my/cider-mode-hooks)

   #+END_SRC

   I treat the REPL mode specially, since certain hooks that work in
   ~clojure-mode~ won't make sense or break functionality in
   ~cider-repl-mode~.

   #+NAME: lisp-setup
   #+BEGIN_SRC emacs-lisp
     (defun my/cider-repl-mode-hooks
       ()
       (my/turn-on 'paredit
		   'rainbow-delimiters
		   'highlight-parentheses))

     (add-hook 'cider-repl-mode-hook
	       'my/cider-repl-mode-hooks)

   #+END_SRC

* Global key bindings

  As far as reasonable, I try to keep my custom key bindings within
  the "official" restraints. Specifically, I want my global key
  bindings to start with "C-c [lower case letter]"~.

  #+name: global-keys
  #+begin_src emacs-lisp
    (global-set-key "\C-cg" 'magit-status)
  #+end_src

* Global navigation

  I like ~ido~ and ~smex~ for narrowing down files, commands, buffers
  etc.

  #+name: global-navigation
  #+begin_src emacs-lisp
    (ido-mode +1)
    (global-set-key "\M-x" 'smex)
    (ido-yes-or-no-mode +1)
  #+end_src

* Org Mode
** Global keys
   Short key bindings for capturing notes/links and switching to agenda.

  #+name: org-config
  #+begin_src emacs-lisp
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cb" 'org-iswitchb)
  #+end_src

** Tasks / TODOs

  #+name: org-config
  #+begin_src emacs-lisp
    (setq org-todo-keywords
	  '((sequence "TODO(t)" "PENDING(p)" "MEETING(m)" "|" "DONE(d)" "CANCELED(c)")))

    (defun my-org-autodone
      (n-done n-not-done)
      "Switch entry to DONE when all subentries are done, to TODO otherwise."
      (let (org-log-done org-log-states)   ; turn off logging
	(org-todo (if (= n-not-done 0) "DONE" "TODO"))))

    (add-hook 'org-after-todo-statistics-hook 'my-org-autodone)
  #+end_src

* Configuration file layout

  Here I define the emacs.el file that gets generated by the code in
  this org file.

  #+begin_src emacs-lisp :tangle yes :noweb no-export :exports code
    ;;;; Do not modify this file by hand.  It was automatically generated
    ;;;; from `emacs.org` in the same directory. See that file for more
    ;;;; information.

    <<environment>>
    <<tools>>
    <<looks>>
    <<formatting>>
    <<lisp-setup>>
    <<global-keys>>
    <<global-navigation>>
  #+end_src

* Tools

  This section defines some functionality used elsewhere in this
  configuration.

** Hooks and modes

  #+name: tools
  #+begin_src emacs-lisp
    (defun my/->string
      (str)
      (cond
       ((stringp str) str)
       ((symbolp str) (symbol-name str))))

    (defun my/->mode-hook
      (name)
      "Turn mode name into hook symbol"
      (intern (replace-regexp-in-string "\\(-mode\\)?\\(-hook\\)?$"
					"-mode-hook"
					(my/->string name))))

    (defun my/->mode
      (name)
      "Turn mode name into mode symbol"
      (intern (replace-regexp-in-string "\\(-mode\\)?$"
					"-mode"
					(my/->string name))))

    (defun my/turn-on
      (&rest mode-list)
      "Turn on the given (minor) modes."
      (dolist (m mode-list)
	(funcall (my/->mode m) +1)))

    (defvar my/normal-base-modes
      (mapcar 'my/->mode '(text prog))
      "The list of modes that are considered base modes for
      programming and text editing. In an ideal world, this should
      just be text-mode and prog-mode, however, some modes that
      should derive from prog-mode derive from fundamental-mode
      instead. They are added here.")

    (defun my/normal-mode-hooks
      ()
      "Returns the mode-hooks for `my/normal-base-modes`"
      (mapcar 'my/->mode-hook my/normal-base-modes))

   #+end_src
* Environment

  For some reason on OSX I can't get Emacs and my shell to
  automatically agree on what PATH is. For now, I hardcode PATH in my
  Emacs configuration.

  #+name: environment
  #+begin_src emacs-lisp
    (add-to-list 'exec-path "/usr/local/bin")
    (add-to-list 'exec-path "/usr/texbin")
    (add-to-list 'exec-path "~/bin")
    (setenv "PATH" "/usr/local/bin:/usr/bin:/usr/texbin:~/bin")
  #+end_src
